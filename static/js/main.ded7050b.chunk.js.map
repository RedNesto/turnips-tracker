{"version":3,"sources":["App.js","helpers.js","serviceWorker.js","index.js"],"names":["App","tableRef","React","createRef","ref","LoadTurnipsData","props","state","handleChange","bind","htmlFor","type","id","onChange","this","title","event","turnipsFile","target","files","Blob","reader","FileReader","turnipsTable","current","onload","_","text","result","console","assert","constructor","name","parsed","JSON","parse","setState","entries","error","errorMessage","SyntaxError","message","onerror","readAsText","preventDefault","log","Component","TurnipsTable","listEntries","sort","turnipsEntriesSort","map","entry","detail","bought","sold","price","key","date","half","TurnipsEntryCell","a","b","Number","MIN_SAFE_INTEGER","splitA","split","splitB","length","i","segA","parseInt","segB","isNaN","compareDates","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ded7050b.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport {compareDates} from './helpers'\n\nfunction App() {\n    const tableRef = React.createRef()\n    return (\n        <div>\n            <LoadTurnipsData tableRef={tableRef}/>\n            <TurnipsTable ref={tableRef}/>\n        </div>\n    )\n}\n\nexport default App\n\nclass LoadTurnipsData extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            tableRef: props.tableRef,\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    render() {\n        return (\n            <form>\n                <label htmlFor=\"turnips-file\">Open Turnips Data: </label>\n                <input type=\"file\" id=\"turnips-file\" onChange={this.handleChange} title=\"Open Turnips Data\"/>\n            </form>\n        )\n    }\n\n    handleChange(event) {\n        const turnipsFile = event.target.files[0]\n        if (!turnipsFile) {\n            return\n        }\n        if (!(turnipsFile instanceof Blob)) {\n            console.log(\"Not a Blob, but a %s\", turnipsFile.constructor.name)\n            return\n        }\n\n        const reader = new FileReader()\n        const turnipsTable = this.state.tableRef.current\n        reader.onload = _ => {\n            const text = reader.result\n            console.assert(typeof text === \"string\", \"readAsText did not return a String result but a %s of value %s\", text.constructor.name, text)\n            try {\n                const parsed = JSON.parse(text)\n                turnipsTable.setState({entries: parsed})\n            } catch (error) {\n                console.error(\"Error occurred when parsing turnips data: %s\", error)\n                let errorMessage = \"more details in the console\"\n                if (error instanceof SyntaxError) {\n                    errorMessage = error.message\n                }\n                turnipsTable.setState({errorMessage: errorMessage})\n            }\n        }\n        reader.onerror = _ => {\n            const error = reader.error\n            console.error(\"Error occurred when reading turnips data file: %s\", error)\n            turnipsTable.setState({errorMessage: `could not read file: ${error.message}`})\n        }\n        reader.readAsText(turnipsFile)\n        event.preventDefault()\n    }\n}\n\nclass TurnipsTable extends React.Component {\n\n    render() {\n        if (!this.state) {\n            return (\n                <p>No Turnips Data Loaded</p>\n            )\n        }\n\n        const errorMessage = this.state.errorMessage\n        if (errorMessage) {\n            return (\n                <p>Error when reading the turnips data: {errorMessage}</p>\n            )\n        }\n\n        const turnipsEntries = this.state.entries.sort(turnipsEntriesSort)\n\n        const listEntries = turnipsEntries.map((entry, _) => TurnipsEntryCell(entry))\n        return (\n            <ol id=\"turnips-table\">\n                {listEntries}\n            </ol>\n        )\n    }\n}\n\nfunction TurnipsEntryCell(props) {\n    let detail\n    const bought = props.bought\n    const sold = props.sold\n    const price = props.price\n    if (bought != null) {\n        if (price != null || price <= 0) {\n            detail = (<p>Bought {bought} for {price * bought} ({price}/unit)</p>)\n        } else {\n            detail = (<p>Bought {bought} for an unknown price</p>)\n        }\n    } else if (sold != null) {\n        if (price != null || price <= 0) {\n            detail = (<p>Sold {sold} for {price * sold} ({price}/unit)</p>)\n        } else {\n            detail = (<p>Sold {sold} for an unknown price</p>)\n        }\n    } else {\n        detail = (<p>No data available</p>)\n    }\n    return (\n        <li key={props.date + '-' + props.half}>\n            <p>Turnips of {props.date} {props.half}</p>\n            {detail}\n        </li>\n    )\n}\n\nfunction turnipsEntriesSort(a, b) {\n    if (a.date === b.date) {\n        return a.half === \"morning\" && b.half === \"afternoon\" ? -1 : 1\n    }\n    return compareDates(a.date, b.date)\n}\n","/**\r\n * Compares two dates stored in string in the format 'year-month-day'\r\n *\r\n * @param {string} a\r\n * @param {string} b\r\n * @return {int} 1 if a is greater than b, -1 if the opposite, 0 if they are equal, Number.MIN_SAFE_INTEGER if input is invalid\r\n */\r\nexport function compareDates(a, b) {\r\n    if (!a || !b || typeof a !== \"string\" || typeof b !== \"string\") {\r\n        return Number.MIN_SAFE_INTEGER\r\n    }\r\n\r\n    if (a === b) {\r\n        // Shortcut as they are already equal as strings\r\n        return 0\r\n    }\r\n\r\n    const splitA = a.split('-')\r\n    const splitB = b.split('-')\r\n\r\n    if (splitA.length !== 3 || splitB.length !== 3) {\r\n        return Number.MIN_SAFE_INTEGER\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        const segA = parseInt(splitA[i])\r\n        const segB = parseInt(splitB[i])\r\n        if (isNaN(segA) || isNaN(segB)) {\r\n            return Number.MIN_SAFE_INTEGER\r\n        }\r\n\r\n        if (segA !== segB) {\r\n            return segA < segB ? -1 : 1\r\n        }\r\n    }\r\n\r\n    return 0\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}