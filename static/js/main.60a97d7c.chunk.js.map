{"version":3,"sources":["helpers.ts","Turnips.ts","TurnipsEntryEditor.tsx","LoadTurnipsData.tsx","TurnipsTable.tsx","App.tsx","serviceWorker.js","index.js"],"names":["isSunday","date","moment","weekday","DayHalf","createTurnipsKey","entry","half","TurnipsNormalizationErrorReason","TurnipsNormalizationError","reason","message","Error","normalizeTurnipsEntry","sunday","DayHalfExpected","undefined","bought","safeParseIntDecimal","sold","price","value","parsed","parseInt","isNaN","isFinite","sortTurnipsEntries","a","b","Morning","Afternoon","Number","MIN_SAFE_INTEGER","splitA","split","splitB","length","i","segA","segB","compareDates","createTurnipsNumberChartData","entries","dayLabels","sellingPriceData","buyingPriceData","dataset","label","data","color","pointRadius","pointHoverRadius","borderWidth","spanGaps","pointBackgroundColor","backgroundColor","borderColor","forEach","shortHalf","push","labels","datasets","options","scales","yAxes","stacked","createProfitChartData","weekLabels","weekProfits","weekBought","weekSold","sort","EntryEditor","props","validateForm","setState","formValid","state","handleInputChange","event","currentTarget","name","handleSubmit","preventDefault","quantity","turnipsTable","tableRef","current","addEntry","turnipsPriceChart","priceChartRef","chartInstance","update","priceChartContainerRef","style","removeProperty","turnipsProfitChart","profitChartRef","profitChartContainerRef","now","Date","hidden","format","getHours","onSubmit","this","display","type","onChange","disabled","React","Component","LoadTurnipsData","turnipsFileInputRef","createRef","downloadDataFakeLinkRef","createNewData","entryEditorRef","clearData","setProperty","useSample","fetch","then","response","ok","text","reportError","status","statusText","parseAndOpenJson","openDataFileSelection","fileInput","click","downloadData","prettifiedJson","JSON","stringify","uriFriendlyData","encodeURIComponent","fakeLinkElement","setAttribute","handleChange","turnipsFile","target","files","item","Blob","openAndParseJsonFile","console","log","reader","FileReader","onload","_","result","assert","constructor","onerror","error","errorMessage","readAsText","parse","openJson","normalizedEntries","map","clearError","onClick","id","width","height","ref","download","TurnipsTable","normalizedEntry","e","key","existingEntryIndex","findIndex","handleVisibilityCheckbox","visible","checked","isVisible","visibilityToggle","turnipsRows","detail","formattedCount","toLocaleString","formattedTotal","TurnipsTableRow","App","dataLoaderRef","ChartsDefaults","global","maintainAspectRatio","window","addEventListener","file","dataTransfer","setupWindowDND","position","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.60a97d7c.chunk.js","sourcesContent":["import moment from \"moment\";\n\n/**\n * Compares two dates stored in string in the format 'year-month-day'\n *\n * @param {string} a\n * @param {string} b\n * @return {int} 1 if a is greater than b, -1 if the opposite, 0 if they are equal, Number.MIN_SAFE_INTEGER if input is invalid\n */\nexport function compareDates(a: string, b: string): number {\n    if (!a || !b) {\n        return Number.MIN_SAFE_INTEGER\n    }\n\n    if (a === b) {\n        // Shortcut if they are already equal as strings\n        return 0\n    }\n\n    const splitA = a.split('-')\n    const splitB = b.split('-')\n\n    if (splitA.length !== 3 || splitB.length !== 3) {\n        return Number.MIN_SAFE_INTEGER\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const segA = parseInt(splitA[i])\n        const segB = parseInt(splitB[i])\n        if (isNaN(segA) || isNaN(segB)) {\n            return Number.MIN_SAFE_INTEGER\n        }\n\n        if (segA !== segB) {\n            return segA < segB ? -1 : 1\n        }\n    }\n\n    return 0\n}\n\nexport function formatDate(date: Date): string {\n    return moment(date).format('yyyy-MM-DD')\n}\n\nexport function dayForDate(date: string): string {\n    return moment(date, 'yyyy-MM-DD').format('dddd')\n}\n\nexport function isSunday(date: string): boolean {\n    return moment(date, 'yyyy-MM-DD').weekday() === 0\n}\n","import {compareDates, isSunday} from \"./helpers\";\n\nexport enum DayHalf {\n    Morning = 'morning',\n    Afternoon = 'afternoon'\n}\n\nexport type TurnipsEntry = {\n    date: string,\n    half?: DayHalf,\n    bought?: number,\n    sold?: number\n    price: number\n}\n\nexport function createTurnipsKey(entry: TurnipsEntry): string {\n    if (entry.half) {\n        return entry.date + '-' + entry.half\n    }\n    return entry.date\n}\n\nexport class TurnipsNormalizationError extends Error {\n    public readonly reason: TurnipsNormalizationErrorReason\n\n    constructor(reason: TurnipsNormalizationErrorReason, entry: TurnipsEntry, message?: string) {\n        super(message ?? `Could not normalize TurnipsEntry: ${reason} (${entry})`);\n        this.reason = reason\n    }\n}\n\nexport enum TurnipsNormalizationErrorReason {\n    DayHalfExpected = 'DayHalf expected'\n}\n\nexport function normalizeTurnipsEntry(entry: TurnipsEntry): TurnipsEntry {\n    const sunday = isSunday(entry.date);\n    if (!sunday && !entry.half) {\n        throw new TurnipsNormalizationError(TurnipsNormalizationErrorReason.DayHalfExpected, entry)\n    }\n\n    return {\n        date: entry.date,\n        half: !sunday ? entry.half : undefined,\n        bought: sunday ? safeParseIntDecimal(entry.bought) : undefined,\n        sold: !sunday ? safeParseIntDecimal(entry.sold) : undefined,\n        price: safeParseIntDecimal(entry.price)\n    }\n}\n\n/**\n * A convenient wrapper around {@link parseInt}, returns 0 if the input is invalid.\n *\n * The input is valid if it is a number (for convenience) or a string representing a decimal integer\n *\n * The input is invalid if `undefined` or the string does not represent a decimal integer and is not finite\n *\n * @param value a decimal string or a number (for convenience)\n * @returns the number if a valid decimal integer, 0 otherwise\n */\nfunction safeParseIntDecimal(value?: string | number): number {\n    if (!value) {\n        return 0\n    }\n\n    if (typeof value === 'number') {\n        return value\n    }\n\n    const parsed = parseInt(value, 10)\n    if (isNaN(parsed) || !isFinite(parsed)) {\n        return 0\n    }\n\n    return parsed\n}\n\nexport function sortTurnipsEntries(a: TurnipsEntry, b: TurnipsEntry): number {\n    if (a.date === b.date) {\n        return a.half === DayHalf.Morning && b.half === DayHalf.Afternoon ? -1 : 1\n    }\n    return compareDates(a.date, b.date)\n}\n\nexport function createTurnipsNumberChartData(entries: TurnipsEntry[]) {\n    let dayLabels: string[] = []\n    let sellingPriceData: Array<number | null> = []\n    let buyingPriceData: Array<number | null> = []\n    entries.forEach(entry => {\n        const price = entry.price\n        if (entry.sold != null) {\n            const shortHalf = entry.half === DayHalf.Morning ? 'am' : 'pm'\n            dayLabels.push(entry.date + shortHalf)\n            sellingPriceData.push(price)\n            buyingPriceData.push(null)\n        } else {\n            dayLabels.push(entry.date)\n            sellingPriceData.push(null)\n            buyingPriceData.push(price)\n        }\n    })\n\n    function dataset(label: string, data: Array<number | null>, color: string) {\n        return {\n            label: label,\n            data: data,\n            pointRadius: 4,\n            pointHoverRadius: 6,\n            borderWidth: 4,\n            spanGaps: true,\n            pointBackgroundColor: color,\n            backgroundColor: color,\n            borderColor: color\n        }\n    }\n\n    return {\n        labels: dayLabels,\n        datasets: [\n            dataset('Selling Price', sellingPriceData, 'rgba(30, 144, 255, 0.2)'),\n            dataset('Buying Price', buyingPriceData, 'rgba(255, 215, 0, 0.2)')\n        ],\n        options: {\n            scales: {\n                yAxes: [{\n                    stacked: true\n                }]\n            }\n        }\n    }\n}\n\nexport function createProfitChartData(entries: TurnipsEntry[]) {\n    let weekLabels: string[] = []\n    let weekProfits: number[] = []\n    let weekBought = 0\n    let weekSold = 0\n    entries.sort(sortTurnipsEntries).forEach(entry => {\n        if (entry.sold != null) {\n            if (weekLabels.length === 0) {\n                // Skip sold values that are not in a cycle (starting sunday)\n                return\n            }\n\n            weekSold += entry.sold * entry.price\n        } else {\n            if (weekLabels.length !== 0) {\n                weekProfits.push(weekSold - weekBought)\n            }\n\n            const bought = entry.bought ?? 0;\n            weekLabels.push(entry.date)\n            weekBought = bought * entry.price\n            weekSold = 0\n        }\n    })\n\n    if (weekBought > 0 || weekSold > 0) {\n        weekProfits.push(weekSold - weekBought)\n    }\n\n    return {\n        labels: weekLabels,\n        datasets: [{\n            label: 'Profit',\n            data: weekProfits\n        }]\n    }\n}\n","import React from \"react\";\nimport {Line as LineChart} from \"react-chartjs-2\";\n\nimport {formatDate, isSunday} from './helpers'\nimport {createProfitChartData, createTurnipsNumberChartData, DayHalf, TurnipsEntry} from \"./Turnips\";\n\nimport TurnipsTable from './TurnipsTable'\n\ntype EntryEditorProps = {\n    tableRef: React.RefObject<TurnipsTable>\n    priceChartRef: React.RefObject<LineChart>\n    priceChartContainerRef: React.RefObject<HTMLDivElement>\n    profitChartRef: React.RefObject<LineChart>\n    profitChartContainerRef: React.RefObject<HTMLDivElement>\n    hidden?: boolean\n}\n\ntype EntryEditorState = {\n    hidden: boolean\n    formValid: boolean\n    date: string\n    half: DayHalf\n    price: number\n    quantity: number\n}\n\nexport default class EntryEditor extends React.Component<EntryEditorProps, EntryEditorState> {\n\n    constructor(props: EntryEditorProps) {\n        super(props)\n        const now = new Date();\n        this.state = {\n            hidden: props.hidden ?? false,\n            formValid: true,\n            date: formatDate(now),\n            half: now.getHours() < 12 ? DayHalf.Morning : DayHalf.Afternoon,\n            price: 0,\n            quantity: 0\n        }\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} style={{display: this.state.hidden ? 'none' : 'unset'}}>\n                <label>\n                    Date:\n                    <input name=\"date\" type=\"date\" value={this.state.date} onChange={this.handleInputChange}/>\n                </label>\n                <label>\n                    Half:\n                    <select name=\"half\" value={this.state.half} onChange={this.handleInputChange}>\n                        <option value=\"morning\">Morning</option>\n                        <option value=\"afternoon\">Afternoon</option>\n                    </select>\n                </label>\n                <label>\n                    Price:\n                    <input name=\"price\" type=\"number\" value={this.state.price} onChange={this.handleInputChange}/>\n                </label>\n                <label>\n                    Quantity:\n                    <input name=\"quantity\" type=\"number\" value={this.state.quantity} onChange={this.handleInputChange}/>\n                </label>\n                <button type=\"submit\" disabled={!this.state.formValid}>Add</button>\n            </form>\n        )\n    }\n\n    validateForm = () => this.setState({formValid: this.state.date.length !== 0})\n\n    handleInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        const {name, value} = event.currentTarget\n        this.setState({[name]: value} as any, this.validateForm)\n    }\n\n    handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        if (!this.state.formValid) {\n            return\n        }\n\n        const date = this.state.date\n        const half = this.state.half\n        const price = this.state.price\n        const quantity = this.state.quantity\n        let entry: TurnipsEntry\n        if (isSunday(date)) {\n            entry = {date: date, bought: quantity, price: price};\n        } else {\n            entry = {date: date, half: half, sold: quantity, price: price};\n        }\n\n        const turnipsTable = this.props.tableRef.current!\n        turnipsTable.addEntry(entry)\n        const entries = turnipsTable.state.entries\n        const turnipsPriceChart = this.props.priceChartRef.current!\n        turnipsPriceChart.chartInstance.data = createTurnipsNumberChartData(entries)\n        turnipsPriceChart.chartInstance.update()\n        this.props.priceChartContainerRef.current!.style.removeProperty('display')\n        const turnipsProfitChart = this.props.profitChartRef.current!\n        turnipsProfitChart.chartInstance.data = createProfitChartData(entries)\n        turnipsProfitChart.chartInstance.update()\n        this.props.profitChartContainerRef.current!.style.removeProperty('display')\n    }\n}\n","import React from \"react\";\nimport {Line as LineChart} from \"react-chartjs-2\";\n\nimport {createProfitChartData, createTurnipsNumberChartData, normalizeTurnipsEntry, sortTurnipsEntries, TurnipsEntry} from \"./Turnips\";\n\nimport TurnipsTable from './TurnipsTable'\nimport EntryEditor from './TurnipsEntryEditor'\n\ntype LoadTurnipsDataProps = {\n    tableRef: React.RefObject<TurnipsTable>\n    priceChartContainerRef: React.RefObject<HTMLDivElement>\n    priceChartRef: React.RefObject<LineChart>\n    profitChartContainerRef: React.RefObject<HTMLDivElement>\n    profitChartRef: React.RefObject<LineChart>\n    entryEditorRef: React.RefObject<EntryEditor>\n}\n\nexport default class LoadTurnipsData extends React.Component<LoadTurnipsDataProps, {}> {\n    private turnipsFileInputRef = React.createRef<HTMLInputElement>()\n    private downloadDataFakeLinkRef = React.createRef<HTMLAnchorElement>()\n\n    render() {\n        return (\n            <form>\n                <button onClick={this.createNewData}>New Turnips Data</button>\n                <button onClick={this.openDataFileSelection}>Select Turnips Data</button>\n                <input type=\"file\" id=\"turnips-file\" onChange={this.handleChange}\n                       style={{width: 0, height: 0}} ref={this.turnipsFileInputRef}/>\n                <button onClick={this.downloadData}>Save Turnips Data</button>\n                {/* eslint-disable-next-line jsx-a11y/anchor-has-content,jsx-a11y/anchor-is-valid */}\n                <a download=\"turnips-data.json\" style={{width: 0, height: 0}} ref={this.downloadDataFakeLinkRef}/>\n                <button onClick={this.useSample}>Open Sample</button>\n                <button onClick={this.clearData}>Clear</button>\n            </form>\n        )\n    }\n\n    createNewData = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        event.preventDefault()\n        this.props.entryEditorRef.current!.setState({hidden: false})\n    }\n\n    clearData = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        event.preventDefault()\n        this.props.priceChartContainerRef.current!.style.setProperty('display', 'none')\n        this.props.profitChartContainerRef.current!.style.setProperty('display', 'none')\n        this.props.tableRef.current!.setState({entries: []})\n        this.props.entryEditorRef.current!.setState({hidden: true})\n    }\n\n    useSample = (event: React.SyntheticEvent) => {\n        event.preventDefault()\n        fetch(\"/turnips-tracker/sample.json\")\n            .then(response => {\n                if (!response.ok) {\n                    this.reportError(`Could not get sample data: ${response.status} ${response.statusText}`)\n                    return\n                }\n\n                return response.text()\n            }).then((text: string | undefined) => this.parseAndOpenJson(text as string))\n    }\n\n    openDataFileSelection = (event: React.SyntheticEvent) => {\n        event.preventDefault()\n        const fileInput = this.turnipsFileInputRef.current!\n        // Reset the input's value so we can select the same file twice in a row\n        fileInput.value = ''\n        fileInput.click()\n    }\n\n    downloadData = (event: React.SyntheticEvent) => {\n        event.preventDefault()\n        const entries = this.props.tableRef.current!.state.entries.sort(sortTurnipsEntries);\n        const prettifiedJson = JSON.stringify(entries, null, 2);\n        const uriFriendlyData = encodeURIComponent(prettifiedJson);\n\n        const fakeLinkElement = this.downloadDataFakeLinkRef.current!;\n        fakeLinkElement.setAttribute('href', 'data:text/plain;charset:utf-8,' + uriFriendlyData)\n        fakeLinkElement.click()\n    }\n\n    handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault()\n        const turnipsFile = event.target?.files?.item(0)\n        if (!turnipsFile) {\n            return\n        }\n        if (!(turnipsFile instanceof Blob)) {\n            console.log(\"Not a Blob, but a %s\", typeof turnipsFile)\n            return\n        }\n        this.openAndParseJsonFile(turnipsFile)\n    }\n\n    openAndParseJsonFile = (turnipsFile: Blob) => {\n        const reader = new FileReader()\n        const turnipsTable = this.props.tableRef.current!\n        reader.onload = _ => {\n            const text = reader.result\n            console.assert(typeof text === \"string\", \"readAsText did not return a String result but a %s of value %s\", text?.constructor.name, text)\n            this.parseAndOpenJson(text as string)\n        }\n        reader.onerror = _ => {\n            const error = reader.error\n            console.error(\"Error occurred when reading turnips data file: %s\", error)\n            turnipsTable.setState({errorMessage: `could not read file: ${error?.message}`})\n        }\n        reader.readAsText(turnipsFile)\n    }\n\n    parseAndOpenJson = (text: string) => {\n        try {\n            const parsed = JSON.parse(text)\n            this.openJson(parsed)\n        } catch (error) {\n            console.error(\"Error occurred when opening turnips data: %s\", error)\n            let errorMessage = \"more details in the console\"\n            if (error instanceof Error) {\n                errorMessage = error.message\n            }\n            this.reportError(errorMessage)\n        }\n    }\n\n    openJson = (entries: TurnipsEntry[]) => {\n        let normalizedEntries = entries.map(normalizeTurnipsEntry);\n        this.props.tableRef.current!.setState({entries: normalizedEntries})\n        const turnipsPriceChart = this.props.priceChartRef.current!\n        turnipsPriceChart.chartInstance.data = createTurnipsNumberChartData(normalizedEntries)\n        turnipsPriceChart.chartInstance.update()\n        this.props.priceChartContainerRef.current!.style.removeProperty('display')\n        const turnipsProfitChart = this.props.profitChartRef.current!\n        turnipsProfitChart.chartInstance.data = createProfitChartData(normalizedEntries)\n        turnipsProfitChart.chartInstance.update()\n        this.props.profitChartContainerRef.current!.style.removeProperty('display')\n\n        this.clearError()\n    }\n\n    reportError = (errorMessage: string) => this.props.tableRef.current!.setState({errorMessage: errorMessage})\n\n    clearError = () => this.props.tableRef.current!.setState({errorMessage: undefined})\n}\n","import React from \"react\";\n\nimport {dayForDate} from \"./helpers\";\nimport {createTurnipsKey, normalizeTurnipsEntry, sortTurnipsEntries, TurnipsEntry} from \"./Turnips\";\n\ntype TurnipsTableProps = {\n    visible?: boolean\n}\n\ntype TurnipsTableState = {\n    entries: TurnipsEntry[]\n    errorMessage?: string\n    visible: boolean\n}\n\nexport default class TurnipsTable extends React.Component<TurnipsTableProps, TurnipsTableState> {\n\n    constructor(props: TurnipsTableProps) {\n        super(props);\n        this.state = {\n            entries: [],\n            visible: props.visible ?? true\n        }\n    }\n\n    addEntry = (entry: TurnipsEntry) => {\n        let normalizedEntry: TurnipsEntry\n        try {\n            normalizedEntry = normalizeTurnipsEntry(entry)\n        } catch (e) {\n            console.error('Failed to create TurnipsEntry: ' + e)\n            if (e instanceof Error) {\n                this.setState({errorMessage: 'Failed to create TurnipsEntry: ' + e.message})\n            }\n            return\n        }\n\n        const entries = this.state.entries\n        const key = createTurnipsKey(normalizedEntry)\n        const existingEntryIndex = entries.findIndex(value => createTurnipsKey(value) === key)\n        if (existingEntryIndex < 0) {\n            entries.push(normalizedEntry)\n        } else {\n            entries[existingEntryIndex] = normalizedEntry\n        }\n        this.setState({entries: entries.sort(sortTurnipsEntries)})\n    }\n\n    render() {\n        if (!this.state) {\n            return (<p>No Turnips Data Loaded</p>)\n        }\n\n        const errorMessage = this.state.errorMessage\n        if (errorMessage) {\n            return (<p>Error when reading the turnips data: {errorMessage}</p>)\n        }\n\n        const isVisible = this.state.visible;\n        if (this.state.entries.length === 0) {\n            return isVisible ? (<p>No Turnips Data Loaded</p>) : (<div/>)\n        }\n\n        const visibilityToggle = (\n            <label>\n                <input type={\"checkbox\"} name={\"visible\"} onChange={this.handleVisibilityCheckbox} checked={isVisible}/>\n                Show Detailed Table\n            </label>\n        )\n\n        if (!isVisible) {\n            // No need to compute the table content if it is not visible\n            return (<div>{visibilityToggle}</div>)\n        }\n\n        const turnipsEntries = this.state.entries.sort(sortTurnipsEntries)\n        const turnipsRows = turnipsEntries.map(entry => TurnipsTableRow(entry))\n        return (\n            <div>\n                {visibilityToggle}\n                <table id=\"turnips-table\">\n                    <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Price</th>\n                        <th>Bought / Sold</th>\n                        <th>Detail</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {turnipsRows}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    handleVisibilityCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => this.setState({visible: event.target.checked})\n}\n\nfunction TurnipsTableRow(props: TurnipsEntry) {\n    let detail\n    let formattedCount\n    const bought = props.bought\n    const sold = props.sold\n    const price = props.price\n    if (bought != null) {\n        formattedCount = bought.toLocaleString()\n        if (bought <= 0) {\n            detail = `Bought none`\n        } else if (price != null && price > 0) {\n            const formattedTotal = (price * bought).toLocaleString()\n            detail = `Bought ${formattedCount} for ${formattedTotal} (${price}/unit)`\n        } else {\n            detail = `Bought ${formattedCount} for an unknown price`\n        }\n    } else if (sold != null) {\n        formattedCount = sold.toLocaleString()\n        if (sold <= 0) {\n            detail = `Sold none`\n        } else if (price != null && price > 0) {\n            const formattedTotal = (price * sold).toLocaleString()\n            detail = `Sold ${formattedCount} for ${formattedTotal} (${price}/unit)`\n        } else {\n            detail = `Sold ${formattedCount} for an unknown price`\n        }\n    } else {\n        formattedCount = 'unknown'\n        detail = 'No data available'\n    }\n    return (\n        <tr key={createTurnipsKey(props)}>\n            <td>{props.date} ({dayForDate(props.date)}) {props.half}</td>\n            <td>{price}</td>\n            <td>{formattedCount}</td>\n            <td>{detail}</td>\n        </tr>\n    )\n}\n","import React from 'react'\nimport {defaults as ChartsDefaults, Line as LineChart} from 'react-chartjs-2'\n\nimport './App.css'\n\nimport EntryEditor from \"./TurnipsEntryEditor\";\nimport LoadTurnipsData from './LoadTurnipsData'\nimport TurnipsTable from './TurnipsTable'\n\nexport default function App() {\n    const dataLoaderRef = React.createRef<LoadTurnipsData>()\n    const tableRef = React.createRef<TurnipsTable>()\n    const priceChartRef = React.createRef<LineChart>()\n    const priceChartContainerRef = React.createRef<HTMLDivElement>()\n    const profitChartRef = React.createRef<LineChart>()\n    const profitChartContainerRef = React.createRef<HTMLDivElement>()\n    const entryEditorRef = React.createRef<EntryEditor>()\n\n    ChartsDefaults.global.maintainAspectRatio = false\n    setupWindowDND(dataLoaderRef)\n\n    return (\n        <div>\n            <LoadTurnipsData ref={dataLoaderRef} tableRef={tableRef}\n                             priceChartRef={priceChartRef} priceChartContainerRef={priceChartContainerRef}\n                             profitChartRef={profitChartRef} profitChartContainerRef={profitChartContainerRef}\n                             entryEditorRef={entryEditorRef}/>\n            <EntryEditor ref={entryEditorRef} hidden={true} tableRef={tableRef}\n                         priceChartRef={priceChartRef} priceChartContainerRef={priceChartContainerRef}\n                         profitChartRef={profitChartRef} profitChartContainerRef={profitChartContainerRef}/>\n            <div ref={priceChartContainerRef} style={{display: 'none', position: 'relative', height: '40vh', width: '95vw'}}>\n                <LineChart ref={priceChartRef} data={{}}/>\n            </div>\n            <div ref={profitChartContainerRef} style={{display: 'none', position: 'relative', height: '40vh', width: '95vw'}}>\n                <LineChart ref={profitChartRef} data={{}}/>\n            </div>\n            <TurnipsTable ref={tableRef} visible={false}/>\n        </div>\n    )\n}\n\nfunction setupWindowDND(dataLoaderRef: React.RefObject<LoadTurnipsData>) {\n    window.addEventListener('dragover', event => event.preventDefault())\n    window.addEventListener('drop', event => {\n        event.preventDefault()\n        let file = event.dataTransfer!.files[0]\n        if (file) {\n            dataLoaderRef.current!.openAndParseJsonFile(file)\n        }\n    })\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}