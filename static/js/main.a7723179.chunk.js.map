{"version":3,"sources":["App.js","helpers.js","serviceWorker.js","index.js"],"names":["App","tableRef","React","createRef","priceChartRef","profitChartRef","ChartsDefaults","global","maintainAspectRatio","style","display","position","height","width","ref","data","LoadTurnipsData","props","state","useSample","bind","handleChange","parseAndOpenJson","reportError","clearError","htmlFor","type","id","onChange","this","title","onClick","event","fetch","then","response","ok","text","status","statusText","preventDefault","turnipsFile","target","files","Blob","reader","FileReader","turnipsTable","current","onload","_","result","console","assert","constructor","name","onerror","error","setState","errorMessage","message","readAsText","log","parsed","JSON","parse","openJson","SyntaxError","json","turnipsPriceChart","turnipsProfitChart","entries","chartInstance","jsonData","dayLabels","sellingPriceData","buyingPriceData","dataset","label","color","pointRadius","pointHoverRadius","borderWidth","spanGaps","pointBackgroundColor","backgroundColor","borderColor","forEach","entry","price","sold","shortHalf","half","push","date","labels","datasets","options","scales","yAxes","stacked","createTurnipsNumberChartData","update","ReactDOM","findDOMNode","parentNode","removeProperty","weekLabels","weekProfits","weekBought","weekSold","sort","turnipsEntriesSort","length","bought","createProfitChartData","Component","TurnipsTable","turnipsRows","map","detail","formattedCount","toLocaleString","formattedTotal","key","moment","format","TurnipsTableRow","a","b","Number","MIN_SAFE_INTEGER","splitA","split","splitB","i","segA","parseInt","segB","isNaN","compareDates","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a7723179.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './App.css'\nimport {compareDates} from './helpers'\nimport {defaults as ChartsDefaults, Line as LineChart} from 'react-chartjs-2'\nimport moment from 'moment'\n\nfunction App() {\n    const tableRef = React.createRef()\n    const priceChartRef = React.createRef()\n    const profitChartRef = React.createRef()\n    ChartsDefaults.global.maintainAspectRatio = false\n    return (\n        <div>\n            <LoadTurnipsData tableRef={tableRef} priceChartRef={priceChartRef} profitChartRef={profitChartRef}/>\n            <div style={{display: 'none', position: 'relative', height: '40vh', width: '95vw'}}>\n                <LineChart ref={priceChartRef} data={{}}/>\n            </div>\n            <div style={{display: 'none', position: 'relative', height: '40vh', width: '95vw'}}>\n                <LineChart ref={profitChartRef} data={{}}/>\n            </div>\n            <TurnipsTable ref={tableRef}/>\n        </div>\n    )\n}\n\nexport default App\n\nclass LoadTurnipsData extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            tableRef: props.tableRef,\n            priceChartRef: props.priceChartRef,\n            profitChartRef: props.profitChartRef,\n        }\n        this.useSample = this.useSample.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.parseAndOpenJson = this.parseAndOpenJson.bind(this)\n        this.reportError = this.reportError.bind(this)\n        this.clearError = this.clearError.bind(this)\n    }\n\n    render() {\n        return (\n            <form>\n                <label htmlFor=\"turnips-file\">Open Turnips Data: </label>\n                <input type=\"file\" id=\"turnips-file\" onChange={this.handleChange} title=\"Open Turnips Data\"/>\n                <button onClick={this.useSample}>Open Sample</button>\n            </form>\n        )\n    }\n\n    useSample(event) {\n        fetch(\"/turnips-tracker/sample.json\")\n            .then(response => {\n                if (!response.ok) {\n                    this.reportError(`Could not get sample data: ${response.status} ${response.statusText}`)\n                    return\n                }\n\n                return response.text()\n            }).then(this.parseAndOpenJson)\n        event.preventDefault()\n    }\n\n    handleChange(event) {\n        const turnipsFile = event.target.files[0]\n        if (!turnipsFile) {\n            return\n        }\n        if (!(turnipsFile instanceof Blob)) {\n            console.log(\"Not a Blob, but a %s\", turnipsFile.constructor.name)\n            return\n        }\n\n        const reader = new FileReader()\n        const turnipsTable = this.state.tableRef.current\n        reader.onload = _ => {\n            const text = reader.result\n            console.assert(typeof text === \"string\", \"readAsText did not return a String result but a %s of value %s\", text.constructor.name, text)\n            this.parseAndOpenJson(text)\n        }\n        reader.onerror = _ => {\n            const error = reader.error\n            console.error(\"Error occurred when reading turnips data file: %s\", error)\n            turnipsTable.setState({errorMessage: `could not read file: ${error.message}`})\n        }\n        reader.readAsText(turnipsFile)\n        event.preventDefault()\n    }\n\n    parseAndOpenJson(text) {\n        try {\n            const parsed = JSON.parse(text)\n            this.openJson(parsed)\n        } catch (error) {\n            console.error(\"Error occurred when opening turnips data: %s\", error)\n            let errorMessage = \"more details in the console\"\n            if (error instanceof SyntaxError) {\n                errorMessage = error.message\n            }\n            this.reportError(errorMessage)\n        }\n    }\n\n    openJson(json) {\n        const turnipsPriceChart = this.state.priceChartRef.current\n        const turnipsProfitChart = this.state.profitChartRef.current\n        const turnipsTable = this.state.tableRef.current\n        turnipsTable.setState({entries: json})\n        turnipsPriceChart.chartInstance.data = createTurnipsNumberChartData(json)\n        turnipsPriceChart.chartInstance.update()\n        ReactDOM.findDOMNode(turnipsPriceChart).parentNode.style.removeProperty('display')\n        turnipsProfitChart.chartInstance.data = createProfitChartData(json)\n        turnipsProfitChart.chartInstance.update()\n        ReactDOM.findDOMNode(turnipsProfitChart).parentNode.style.removeProperty('display')\n\n        this.clearError()\n    }\n\n    reportError(errorMessage) {\n        const turnipsTable = this.state.tableRef.current\n        turnipsTable.setState({errorMessage: errorMessage})\n    }\n\n    clearError() {\n        const turnipsTable = this.state.tableRef.current\n        turnipsTable.setState({errorMessage: null})\n    }\n}\n\nclass TurnipsTable extends React.Component {\n\n    render() {\n        if (!this.state) {\n            return (<p>No Turnips Data Loaded</p>)\n        }\n\n        const errorMessage = this.state.errorMessage\n        if (errorMessage) {\n            return (<p>Error when reading the turnips data: {errorMessage}</p>)\n        }\n\n        const turnipsEntries = this.state.entries.sort(turnipsEntriesSort)\n\n        const turnipsRows = turnipsEntries.map(entry => TurnipsTableRow(entry))\n        return (\n            <table id=\"turnips-table\">\n                <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Price</th>\n                    <th>Bought / Sold</th>\n                    <th>Detail</th>\n                </tr>\n                </thead>\n                <tbody>\n                {turnipsRows}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nfunction TurnipsTableRow(props) {\n    let detail\n    let formattedCount\n    const bought = props.bought\n    const sold = props.sold\n    const price = props.price\n    if (bought != null) {\n        formattedCount = bought.toLocaleString()\n        if (bought <= 0) {\n            detail = `Bought none`\n        } else if (price != null && price > 0) {\n            const formattedTotal = (price * bought).toLocaleString()\n            detail = `Bought ${formattedCount} for ${formattedTotal} (${price}/unit)`\n        } else {\n            detail = `Bought ${formattedCount} for an unknown price`\n        }\n    } else if (sold != null) {\n        formattedCount = sold.toLocaleString()\n        if (sold <= 0) {\n            detail = `Sold none`\n        } else if (price != null && price > 0) {\n            const formattedTotal = (price * sold).toLocaleString()\n            detail = `Sold ${formattedCount} for ${formattedTotal} (${price}/unit)`\n        } else {\n            detail = `Sold ${formattedCount} for an unknown price`\n        }\n    } else {\n        formattedCount = 'unknown'\n        detail = 'No data available'\n    }\n    return (\n        <tr key={props.date + '-' + props.half}>\n            <td>{props.date} ({dayForDate(props.date)}) {props.half}</td>\n            <td>{price}</td>\n            <td>{formattedCount}</td>\n            <td>{detail}</td>\n        </tr>\n    )\n}\n\nfunction turnipsEntriesSort(a, b) {\n    if (a.date === b.date) {\n        return a.half === \"morning\" && b.half === \"afternoon\" ? -1 : 1\n    }\n    return compareDates(a.date, b.date)\n}\n\nfunction createTurnipsNumberChartData(jsonData) {\n    let dayLabels = []\n    let sellingPriceData = []\n    let buyingPriceData = []\n    jsonData.forEach(entry => {\n        const price = entry.price\n        if (entry.sold != null) {\n            const shortHalf = entry.half === 'morning' ? 'am' : 'pm'\n            dayLabels.push(entry.date + shortHalf)\n            sellingPriceData.push(price)\n            buyingPriceData.push(null)\n        } else {\n            dayLabels.push(entry.date)\n            sellingPriceData.push(null)\n            buyingPriceData.push(price)\n        }\n    })\n\n    function dataset(label, data, color) {\n        return {\n            label: label,\n            data: data,\n            pointRadius: 4,\n            pointHoverRadius: 6,\n            borderWidth: 4,\n            spanGaps: true,\n            pointBackgroundColor: color,\n            backgroundColor: color,\n            borderColor: color\n        }\n    }\n\n    return {\n        labels: dayLabels,\n        datasets: [\n            dataset('Selling Price', sellingPriceData, 'rgba(30, 144, 255, 0.2)'),\n            dataset('Buying Price', buyingPriceData, 'rgba(255, 215, 0, 0.2)')\n        ],\n        options: {\n            scales: {\n                yAxes: [{\n                    stacked: true\n                }]\n            }\n        }\n    }\n}\n\nfunction createProfitChartData(jsonData) {\n    let weekLabels = []\n    let weekProfits = []\n    let weekBought = 0\n    let weekSold = 0\n    jsonData.sort(turnipsEntriesSort).forEach(entry => {\n        if (entry.sold != null) {\n            if (weekLabels.length === 0) {\n                // Skip sold values that are not in a cycle (starting sunday)\n                return\n            }\n\n            weekSold += entry.sold * entry.price\n        } else {\n            if (weekLabels.length !== 0) {\n                weekProfits.push(weekSold - weekBought)\n            }\n\n            weekLabels.push(entry.date)\n            weekBought = entry.bought * entry.price\n            weekSold = 0\n        }\n    })\n\n    if (weekBought > 0 || weekSold > 0) {\n        weekProfits.push(weekSold - weekBought)\n    }\n\n    return {\n        labels: weekLabels,\n        datasets: [{\n            label: 'Profit',\n            data: weekProfits\n        }]\n    }\n}\n\nfunction dayForDate(date) {\n    return moment(date, 'yyyy-MM-DD').format('dddd')\n}\n","/**\r\n * Compares two dates stored in string in the format 'year-month-day'\r\n *\r\n * @param {string} a\r\n * @param {string} b\r\n * @return {int} 1 if a is greater than b, -1 if the opposite, 0 if they are equal, Number.MIN_SAFE_INTEGER if input is invalid\r\n */\r\nexport function compareDates(a, b) {\r\n    if (!a || !b || typeof a !== \"string\" || typeof b !== \"string\") {\r\n        return Number.MIN_SAFE_INTEGER\r\n    }\r\n\r\n    if (a === b) {\r\n        // Shortcut as they are already equal as strings\r\n        return 0\r\n    }\r\n\r\n    const splitA = a.split('-')\r\n    const splitB = b.split('-')\r\n\r\n    if (splitA.length !== 3 || splitB.length !== 3) {\r\n        return Number.MIN_SAFE_INTEGER\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        const segA = parseInt(splitA[i])\r\n        const segB = parseInt(splitB[i])\r\n        if (isNaN(segA) || isNaN(segB)) {\r\n            return Number.MIN_SAFE_INTEGER\r\n        }\r\n\r\n        if (segA !== segB) {\r\n            return segA < segB ? -1 : 1\r\n        }\r\n    }\r\n\r\n    return 0\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}